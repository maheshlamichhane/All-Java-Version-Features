Records
-> Records are a special type of class that help avoid boilerplate code. They are considered
"data carriers".
-> Records are immutable and are final by default.
-> You cannot extend your custom record because records already(implicitly) extend from the
Record class. This is simillar to enums(which implicitly extend from Enum).
-> Records can have both static fields and static methods.
-> Record can have instance methods.
-> Records cannot have instance fields. All the instance fields are listed as "components" in the
record declaration.
-> Records can implement interfaces.
-> Records are specified using a record declaration where you specify the "components" of the
record.
public record CarRecord(String regNumber,String owner){}
-> Implicitly generated are:
    * canonical constructor.
    * toString() - the string representation of all the record class's components, with their names.
    * equals() and hashCode() - which specify that two record classes are equal if they of the
    same type and contain equal component values.
    * public accessor methods with the same name as the components.

-> you can override all the default implementations. This includes the canonical constructor.
default implementation
public CardRecord(String regNumber,String owner){
    this.regNumber = regNumber;
    this.owner = owner;
}
custom implementation
public CardRecord(String regNumber,String owner){
    if(regNumber.length() <=4 ){
        throw new IllegalArgumentException();
    }
    this.regNumber = regNumber;
    this.owner = owner;
}
compact constructor
public CardREcord{
    if(regNumber.length() <=4){
        throw new Exception();
    }
}

